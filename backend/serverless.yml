app: sparepart-store
service: sparepart-store

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resources section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    PARTS_TABLE: Parts-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: serverless-daniel-sps-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: '*'

custom:
  documentation:
    models:
      - name: CreatePartRequest
        contentType: 'application/json'
        schema: ${file(./models/create-part-model.json)}
      - name: UpdatePartRequest
        contentType: 'application/json'
        schema: ${file(./models/update-part-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetParts:
    handler: src/lambda/http/getParts.handler
    events:
      - http:
          method: get
          path: parts
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PARTS_TABLE}'

  CreatePart:
    handler: src/lambda/http/createPart.handler
    events:
      - http:
          method: post
          path: parts
          cors: true
          authorizer: Auth
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: 'Create new part'
            description: 'Allow user to create new part in list'
            requestModels:
              'application/json': CreatePartRequest

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PARTS_TABLE}'

  UpdatePart:
    handler: src/lambda/http/updatePart.handler
    events:
      - http:
          method: patch
          cors: true
          path: parts/{partNum}
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: 'Update part'
            description: 'Allow user to update part information and stock value'
            requestModels:
              'application/json': UpdatePartRequest
            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PARTS_TABLE}'

  DeletePart:
    handler: src/lambda/http/deletePart.handler
    events:
      - http:
          method: delete
          cors: true
          path: parts/{partNum}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PARTS_TABLE}'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          cors: true
          path: parts/{partNum}/attachment
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PARTS_TABLE}'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    PartsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: partNum
            AttributeType: S
          - AttributeName: vendorPartNum
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: partNum
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: VENDOR_PART_NUM_INDEX
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: vendorPartNum
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PARTS_TABLE}
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket